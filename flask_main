from flask import Flask, jsonify, request

app = Flask(__name__)

# Sample data (can be replaced with a database)
books = {
    1: {"id": 1,
    "title": "The Hobbit",
    "author": "J.R.R. Tolkien",
    "published_date": "1957-09-13",
    "genre": "Fiction",
    "status": "Available"},

    2: {"id": 2,
    "title": "Atomic Habbits",
    "author": "James Clear",
    "published_date": "2018-10-16",
    "genre": "Selfhelp",
    "status": "Available"}
}

#list of members who join library
{
    1: {"id": 1, "name": "Member 1", "email": "member1@example.com", "membership_date": "2023-01-01", "active_status": "Active"},
    2: {"id": 2, "name": "Member 2", "email": "member2@example.com", "membership_date": "2023-01-01", "active_status": "Active"},
    3: {"id": 3, "name": "Member 3", "email": "member3@example.com", "membership_date": "2023-01-01", "active_status": "Active"},
}

# Get all books (retrieve the book)
@app.route('/books', methods=['GET'])
def get_books():
    return books

# Get or Search a specific book by title 
@app.route('/books/<int:book_title>', methods=['GET'])
def get_book_by_title(book_title):
    for book in books:
        if book['title']==book_title:
            return book

    return {'error':'Book not found'}

# Get a specific book by Author's name
@app.route('/books/<int:book_author>', methods=['GET'])
def get_book_by_author(author_name):
    for book in books:
        if book['author']==author_name:
            return book

    return {'error':'Book not found'}

# Get a specific book by ID
@app.route('/books/<int:book_id>', methods=['GET'])
def get_book_by_id(book_id):
    for book in books:
        if book['id']==book_id:
            return book

    return {'error':'Book not found'}

# Create a book
@app.route('/books', methods=['POST'])
def create_book():
    new_book={'id':len(books)+1, 'title':request.json['title'], 'author':request.json['author']}
    books.append(new_book)
    return new_book


# Update a book
@app.route('/books/<int:book_id>', methods=['PUT'])
def update_book(book_id):
    for book in books:
        if book['id']==book_id:
            book['title']=request.json['title']
            book['author']=request.json['author']
            return book 
    return {'error':'Book not found'}

# Delete a book
@app.route('/books/<int:book_id>', methods=['DELETE'])
def delete_book(book_id):
    for book in books:
        if book['id']==book_id:
            books.remove(book)
            return {"data":"Book Deleted Successfully"}

    return {'error':'Book not found'}


@app.route('/uploadbook', methods=['POST'])
def uploadbook():
    import os
    uploaded_file = request.files['file']
    if uploaded_file and allowed_file(uploaded_file.filename):
        destination = os.path.join('uploads/',uploaded_file.filename)
        uploaded_file.save(destination)
        return {'data':'File Uploaded Successfully'}

    else:
        return {'error':'File upload failed, or invalid file type'}


def allowed_file(filename):
    ALLOWED_EXTS = ['png', 'jpg', 'jpeg']
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTS



# In-memory token storage
tokens = {}

# Generate a simple token
def generate_token(username):
    token = hashlib.sha256(f"{username}{time.time()}".encode()).hexdigest()
    tokens[token] = username
    return token

# Authentication decorator
def token_required(func):
    def wrapper(*args, **kwargs):
        token = request.headers.get('Authorization')
        if not token or token not in tokens:
            return jsonify({"message": "Token is invalid or missing"}), 401
        return func(*args, **kwargs)
    wrapper.__name__ = func.__name__  # Preserve function name
    return wrapper

# Login endpoint to generate token
@app.route('/auth/login', methods=['POST'])
def login():
    data = request.get_json()
    if data['username'] == 'admin' and data['password'] == 'password123':
        token = generate_token(data['username'])
        return jsonify({"token": token}), 200
    return jsonify({"message": "Invalid credentials"}), 401

# Pagination helper function
def paginate_data(data, page, limit):
    start = (page - 1) * limit
    end = start + limit
    return data[start:end]

# GET books with pagination
@app.route('/books', methods=['GET'])
def get_books_by_id():
    page = int(request.args.get('page', 1))
    limit = int(request.args.get('limit', 10))
    paginated_books = paginate_data(books, page, limit)
    return jsonify({
        "page": page,
        "limit": limit,
        "total_books": len(books),
        "books": paginated_books
    }), 200


# Run the flask App
if __name__ == '__main__':
    app.run(debug=True)
